-- logic explanation
-- new users : who come first time but not cam on early date (for ex > 11 date user 3 not came on 10)
-- 			user not in (previous dates user)
--             count(user)
--             
-- return exactly on next day :
-- 	user in (early date user)
--     for finding early date user as same as next date - use join at user and day+1
--     (ex 1 2023-09-10   join 1 2023-09-11 ) > represent repeated user 
--     

-- retension rate : returneduser / new user 

-- NEW USER COLUMN
SELECT activity_date,COUNT(DISTINCT user_id) AS new_user FROM user_activity as a 
WHERE user_id NOT IN (
        SELECT user_id 
        FROM user_activity AS b 
        WHERE b.activity_date < a.activity_date)
GROUP BY activity_date
ORDER BY activity_date;
    


-- RETURN USER 
 SELECT activity_date, COUNT(DISTINCT user_id) AS returned_users FROM user_activity
WHERE user_id IN (
        SELECT a1.user_id  
		FROM user_activity AS a1
        JOIN user_activity AS b1 
        ON a1.user_id = b1.user_id AND b1.activity_date = DATE_ADD(a1.activity_date, INTERVAL 1 DAY))
GROUP BY activity_date
ORDER BY activity_date;
    

